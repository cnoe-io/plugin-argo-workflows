/**
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { IoArgoprojEventsV1alpha1Backoff } from '../models/IoArgoprojEventsV1alpha1Backoff';
import { IoArgoprojEventsV1alpha1EventSourceFilter } from '../models/IoArgoprojEventsV1alpha1EventSourceFilter';
import { IoArgoprojEventsV1alpha1KafkaConsumerGroup } from '../models/IoArgoprojEventsV1alpha1KafkaConsumerGroup';
import { IoArgoprojEventsV1alpha1SASLConfig } from '../models/IoArgoprojEventsV1alpha1SASLConfig';
import { IoArgoprojEventsV1alpha1TLSConfig } from '../models/IoArgoprojEventsV1alpha1TLSConfig';
import { HttpFile } from '../http/http';

export class IoArgoprojEventsV1alpha1KafkaEventSource {
    /**
    * Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/Shopify/sarama/blob/main/config.go e.g.  consumer:   fetch:     min: 1 net:   MaxOpenRequests: 5  +optional
    */
    'config'?: string;
    'connectionBackoff'?: IoArgoprojEventsV1alpha1Backoff;
    'consumerGroup'?: IoArgoprojEventsV1alpha1KafkaConsumerGroup;
    'filter'?: IoArgoprojEventsV1alpha1EventSourceFilter;
    'jsonBody'?: boolean;
    'limitEventsPerSecond'?: string;
    'metadata'?: { [key: string]: string; };
    'partition'?: string;
    'sasl'?: IoArgoprojEventsV1alpha1SASLConfig;
    'tls'?: IoArgoprojEventsV1alpha1TLSConfig;
    'topic'?: string;
    'url'?: string;
    'version'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "config",
            "baseName": "config",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionBackoff",
            "baseName": "connectionBackoff",
            "type": "IoArgoprojEventsV1alpha1Backoff",
            "format": ""
        },
        {
            "name": "consumerGroup",
            "baseName": "consumerGroup",
            "type": "IoArgoprojEventsV1alpha1KafkaConsumerGroup",
            "format": ""
        },
        {
            "name": "filter",
            "baseName": "filter",
            "type": "IoArgoprojEventsV1alpha1EventSourceFilter",
            "format": ""
        },
        {
            "name": "jsonBody",
            "baseName": "jsonBody",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "limitEventsPerSecond",
            "baseName": "limitEventsPerSecond",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "partition",
            "baseName": "partition",
            "type": "string",
            "format": ""
        },
        {
            "name": "sasl",
            "baseName": "sasl",
            "type": "IoArgoprojEventsV1alpha1SASLConfig",
            "format": ""
        },
        {
            "name": "tls",
            "baseName": "tls",
            "type": "IoArgoprojEventsV1alpha1TLSConfig",
            "format": ""
        },
        {
            "name": "topic",
            "baseName": "topic",
            "type": "string",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return IoArgoprojEventsV1alpha1KafkaEventSource.attributeTypeMap;
    }

    public constructor() {
    }
}

